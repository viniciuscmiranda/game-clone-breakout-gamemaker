<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>blockssss</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set
//Position in Block Grid
xpos=global.controller.i2+1;
ypos=global.controller.i+1;

//Default Values
hp=1;
chance=0;

//Get Neighbor Blocks
block[0]=(instance_place(x+sprite_width+2,y,obj_block));//Right
block[1]=(instance_place(x+sprite_width+2,y-sprite_height-2,obj_block));//Top Right
block[2]=(instance_place(x,y-sprite_height-2,obj_block));//Top
block[3]=(instance_place(x-sprite_width-2,y-sprite_height-2,obj_block));//Top Left
block[4]=(instance_place(x-sprite_width-2,y,obj_block));//Left
block[5]=(instance_place(x-sprite_width-2,y+sprite_height+2,obj_block));//Bottom Left
block[6]=(instance_place(x,y+sprite_height+2,obj_block));//Bottom
block[7]=(instance_place(x+sprite_width+2,y+sprite_height+2,obj_block));//Bottom Right
if(block[2]!=noone)block[8]=block[2].block[2];//Top+Top
if(block[6]!=noone)block[9]=block[6].block[6];//Bottom+Bottom

//Choose Type
type=scr_chooseblock(_notype,_hp1,_hp2,_hp3,_pw,_boom,_fix);
if(global.blocks&gt;global.maxblocks)type=_notype;

//Type Rules
switch(type){
    case _notype:
        visible=false;
        hp=0;
        break;
        
    case _fix:
        global.blocks--;
        color=make_colour_rgb(208,208,208);
        break;
        
    case _hp1: 
        chance=4; 
        hp=type;
        color=make_colour_rgb(0,149,205); 
        break;
        
    case _hp2: 
        chance=3;
        hp=type; 
        color=make_colour_rgb(80,171,236);
        break;
        
    case _hp3: 
        chance=2;
        hp=type;
        color=make_colour_rgb(0,148,231); 
        break;
        
    case _boom:
        hp=4;
        global.blocks--;
        color=make_colour_rgb(248,222,152); 
        break;
    
    case _pw:  
        hp=3;
        global.blocks--; 
        color=make_colour_rgb(189,158,232);
        break;
}

drop=irandom(chance);//Roll Dice to Drop

image_index=type-1;//Get Sprite
image_speed=0;//Don't Animate
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If Hp&lt;0
if(hp&lt;=0){
    switch(type){
        case _hp1: 
        case _hp2: 
        case _hp3: 
            if(drop==chance){ 
                if(global.hasdestroyed&lt;global.mustdestroy){
                    instance_create(x,y,obj_power);
                }
            }
        global.hasdestroyed++;
            
        case _notype: 
            global.blocks--;
            break;
            
        case _boom:
            instance_create(x,y,obj_boomrange);
            break;
        
        case _pw:  
            instance_create(x,y,obj_powerup);
            break;
    }
    if(instance_exists(obj_ball))global.destroyed+=ceil(obj_ball.speed*type);
    else global.destroyed+=ceil(5*type)
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw hp
draw_self();
if(type!=_fix &amp;&amp; hp&gt;0){
    draw_set_font(ft_minhud);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_color(c_black);
    draw_set_alpha(0.4);
    draw_text(x,y,string(hp));
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_color(c_white);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
